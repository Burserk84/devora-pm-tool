// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUM for Task Status
enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}


// TASK MODEL
model Task {
  id          String     @id @default(cuid())
  title       String
  description String?    // Renamed from 'content' for clarity
  status      TaskStatus @default(TODO)
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String

  dueDate     DateTime?  // Optional: A task might not have a due date

  assignee    User?      @relation("AssignedTasks", fields: [assigneeId], references: [id])
  assigneeId  String?

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum Role {
  ADMIN
  MEMBER
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  // ownerId is now replaced by the members relation
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // NEW: A project can have many members
  members     ProjectMembership[]
  messages Message[]

}

enum UserRole {
  SUPERADMIN
  USER
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String
  title     String?
  role      UserRole  @default(USER)
  
  // A user can be assigned to many tasks
  assignedTasks Task[] @relation("AssignedTasks")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // A user can be a member of many projects
  projects    ProjectMembership[]

  // A user can receive many notifications
  notifications Notification[] @relation("Notifications")
  messages Message[]
}

// "Join Table" for the many-to-many relationship
model ProjectMembership {
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      Role    @default(MEMBER)

  // This creates a composite primary key
  @@id([projectId, userId])
}

model Notification {
  id          String   @id @default(cuid())
  message     String   // The notification text, e.g., "Amirali assigned you to..."
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  // The user who the notification is FOR
  recipient   User     @relation("Notifications", fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId String

  // Optional link to navigate to when clicked
  // For example, /project/projectId/task/taskId
  actionUrl   String?
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  // Relation to the User who sent the message
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  // Relation to the Project the message belongs to
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
}